class App extends PIXI.Application{constructor(i,t,e){super({width:i,height:t,backgroundColor:e,resolution:window.devicePixelRatio||1}),this.view.width=i,this.view.height=t}domElement(){return this.view}addChild(i){this.stage.addChild(i)}onUpdate(i){this.ticker.add(i)}}
class BorderText extends PIXI.Text{constructor(e,s){super(e,Object.assign({fill:GameColors.white,fontSize:16,stroke:GameColors.black,strokeThickness:5},s))}}
class Button extends PIXI.Container{constructor({text:t,action:i=function(){},color:h="white",margin:e=10}){super(),this.text=t,this.action=i,this.color=h,this.margin=e,this.box=PIXI.Sprite.from(PIXI.Texture.WHITE),this.box.tint=h,this.addChild(this.box),t&&(this.text=new PIXI.Text(t,{fill:GameColors.white}),this.addChild(this.text),this.text.x=e,this.text.y=e/2),this.box.width=this.text.width+2*e,this.box.height=this.text.height+e,this.buttonMode=!0,this.interactive=!0,this.on("tap",i),this.on("click",i),this.hitArea=new PIXI.Rectangle(0,0,this.box.width,this.box.height)}}
class DialoguePrompt extends PIXI.Container{constructor(t,e){super(),this.bind=createBinder(this),this.margin=50/1080*window.innerHeight,this.title=new BorderText(t,{fill:GameColors.white,fontSize:50}),this.addChild(this.title),centerTo(this.title,game.getScreen()),this.title.y=this.margin,this.submit=new Button({text:"Submit",action:e,color:GameColors.azure,margin:20}),centerTo(this.submit,game.getScreen()),this.submit.y=game.getScreen().height-this.margin-this.submit.height,this.addChild(this.submit)}update(t){this.margin=50/1080*window.innerHeight,centerTo(this.title,game.getScreen()),this.title.y=this.margin,centerTo(this.submit,game.getScreen()),this.submit.y=game.getScreen().height-this.margin-this.submit.height}mouseDown(t){}mouseMove(t){}mouseUp(t){}}
class DrawCharacterScreen extends DialoguePrompt{constructor(e,a){super(e,a),this.drawingSpace=new DrawSpace(100,100),centerTo(this.drawingSpace,game.getScreen()),this.addChild(this.drawingSpace);var t=new PIXI.Container;this.addChild(t);var i=this.drawingSpace.pen,r=0;for(var s in GameColors){var o=new Button({text:"hi",action:function(){i.color=numberToColor(this.color)},color:GameColors[s]});o.width=o.height=50,this.updatePalletColor(o,r++),t.addChild(o)}this.pallet=t,centerTo(this.pallet,game.getScreen())}updatePalletColor(e,a){var t=Math.round(a*e.width);e.x=t%this.drawingSpace.width,e.y=Math.floor(t/this.drawingSpace.width)*e.height}update(e){this.drawingSpace.update();var a=0;for(var t of this.pallet.children)this.updatePalletColor(t,a++);centerTo(this.pallet,game.getScreen()),this.pallet.y=game.getScreen().height/2+this.drawingSpace.height/2,centerTo(this.drawingSpace,game.getScreen()),super.update(e)}destroy(e){super.destroy(e),this.drawingSpace.destroy()}localisePos(e,a){return[e-this.x-this.drawingSpace.x,a-this.y-this.drawingSpace.y]}mouseDown(e){this&&this.drawingSpace.startDrawing(...this.localisePos(e.pageX,e.pageY))}mouseMove(e){this&&this.drawingSpace.draw(...this.localisePos(e.pageX,e.pageY))}mouseUp(e){this&&(enableScroll(),this.drawingSpace.stopDrawing())}}
class DrawSpace extends PIXI.Container{constructor(t,e){super(),this.stage=new createjs.Stage(document.createElement("canvas")),this.stage.canvas.width=t,this.stage.canvas.height=e,this.background=PIXI.Sprite.from(PIXI.Texture.WHITE),this.background.width=t,this.background.height=e,this.addChild(this.background),this.sprite=new PIXI.Sprite(PIXI.Texture.from(this.stage.canvas)),this.addChild(this.sprite),this.drawing=new createjs.Shape,this.stage.addChild(this.drawing),this.pen={color:"#ff00ff",size:2},this.stopDrawing(),this.stage.update(),this.width=500,this.height=this.width*e/t}setSize(t,e){this.stage.canvas.width=e,this.stage.canvas.height=t}startDrawing(t,e){this.pen.active=!0,this.draw(t,e)}stopDrawing(t,e){!this.pen.moved&&t&&e&&this.draw(t,e),this.pen.active=!1,this.pen.moved=!1,this.pen.x=this.pen.y=null}draw(t,e){t/=5,e/=5,this.pen.active&&(this.pen.x&&(this.moved=!0,this.drawing.graphics.beginStroke(this.pen.color).setStrokeStyle(this.pen.size,"round").moveTo(this.pen.x||t,this.pen.y||e).lineTo(t,e),this.stage.update(),this.sprite.texture.update()),this.pen.x=t,this.pen.y=e)}async createBlob(){return new Promise((t,e)=>{this.stage.canvas.toBlob(t,"image/png",1)})}update(t){window.innerWidth<500?this.width=window.innerWidth:this.width=500,this.height=this.width*this.stage.canvas.height/this.stage.canvas.width}destroy(){this.stage.removeAllChildren(),this.stage.removeAllEventListeners(),this.stage._eventListeners=null}}
class EnterTextScreen extends DialoguePrompt{constructor(t,e){super(t,e),this.submit=e,this.textInput=new PIXI.TextInput({input:{fontSize:"36px",padding:"12px",width:"500px",color:"#26272E"},box:{default:{fill:15264243,rounded:12,stroke:{color:13356768,width:3}},focused:{fill:14803950,rounded:12,stroke:{color:11251654,width:3}},disabled:{fill:14408667,rounded:12}}}),this.textInput.placeholder=t,centerTo(this.textInput,game.getScreen()),this.addChild(this.textInput)}update(t){centerTo(this.textInput,game.getScreen()),super.update(t)}}
class Game{constructor(){this.bind=createBinder(this),this.touchHandler=new TouchHandler,this.loader=new PIXI.Loader,this.data={maps:{},characters:{}},this.app=new App(window.innerWidth,window.innerHeight,"#000000"),this.info={},document.body.appendChild(this.app.domElement()),this.app.onUpdate(this.bind("update")),window.addEventListener("mousedown",this.bind("mouseDown")),window.addEventListener("mouseup",this.bind("mouseUp")),window.addEventListener("mousemove",this.bind("mouseMove")),window.addEventListener("resize",this.bind("windowResize")),window.addEventListener("mousewheel",e=>{e.altKey?game.world.x-=e.deltaY:game.world.y-=e.deltaY})}getScreen(){return this.app.screen}update(e){this.dialogue&&this.dialogue.update&&this.dialogue.update(e),this.world&&this.world.update&&this.world.update(e)}async loadFile(e){var i=this;return new Promise((t,o)=>{i.loader.add(e),i.loader.load((i,o)=>{t(o[e].data),console.log("File Loaded",e)})})}startGame(e){this.dialogue&&(this.dialogue.destroy(),delete this.dialogue);var i=io(e);this.socket=i,this.dialogue=new BorderText("Connecting To Server...",{fontSize:60}),centerTo(this.dialogue,this.getScreen()),this.app.addChild(this.dialogue),i.on("connect",this.bind("connectedToServer"))}connectedToServer(){this.world&&(this.world.destroy({children:!0}),delete this.player,delete this.sector,this.info={},delete this.world),this.dialogue&&(this.dialogue.destroy(),delete this.dialogue),console.log("Connected To Server"),this.dialogue=new EnterTextScreen("Enter Username",this.bind("login")),this.app.addChild(this.dialogue)}async createCharacter(){this.dialogue&&await this.cleanDialogue(),this.dialogue=new DrawCharacterScreen("Draw a character",this.bind("login")),this.app.addChild(this.dialogue)}async cleanDialogue(){var e=!0;this.dialogue.textInput&&(this.info.name=this.dialogue.textInput.text,e=!1),this.dialogue.drawingSpace&&(this.info.textureBlob=await this.dialogue.drawingSpace.createBlob()),this.dialogue.destroy({children:e}),delete this.dialogue}async login(){this.dialogue&&this.cleanDialogue(),this.data.characters.default=await this.loadFile("media/default.png"),this.world=new World,this.app.addChild(this.world),this.info&&this.emit("joinGame",this.info)}emit(...e){this.socket&&this.socket.emit(...e)}on(...e){this.socket&&this.socket.on(...e)}mouseDown(e){if(2==e.which)return game.world.x=0,void(game.world.y=0);this.dialogue&&this.dialogue.mouseDown&&this.dialogue.mouseDown(e),this.world&&this.world.mouseDown&&this.world.mouseDown(e)}mouseMove(e){this.dialogue&&this.dialogue.mouseMove&&this.dialogue.mouseMove(e)}mouseUp(e){this.dialogue&&this.dialogue.mouseUp&&this.dialogue.mouseUp(e)}windowResize(e){this.app.resizeTo=document.body,this.app.resize()}}
PIXI.settings.SCALE_MODE=PIXI.SCALE_MODES.NEAREST;
class Player extends PIXI.Container{constructor(t){super(),this.info=t,this.id=t.id,this.name=t.name,this.destination={x:this.x,y:this.y},this.moving=!1,this.nicknameSprite=new BorderText(this.name),this.addChild(this.nicknameSprite),this.updateInfo(t)}get worldPos(){return{x:this.sector.x*game.info.SECTOR_SIZE+this.x,y:this.sector.y*game.info.SECTOR_SIZE+this.y}}async updateInfo(t){for(var i in t)this.info[i]=t[i];this.character?this.character.texture=PIXI.Texture.from(URL.createObjectURL(t.textureBlob)):(this.character=new PIXI.Sprite(PIXI.Texture.from(t.textureBlob?URL.createObjectURL(t.textureBlob):game.data.characters.default)),this.addChild(this.character));var e=subVec({x:this.x,y:this.y},this.destination);this.map=t.map,this.x=t.x+e[0],this.y=t.y+e[1],this.sector=t.sector,this.speed=t.speed,this.destination={x:t.x,y:t.y}}update(){if(game.player){var t=moveTowards({x:this.x,y:this.y},this.destination,this.speed);this.x=t.x,this.y=t.y,this.moving=!(this.x==this.destination.x&&this.y==this.destination.y),centerTo(this.nicknameSprite,this),this.nicknameSprite.y=0}}moveTo(t){this.info.x=t.x,this.info.y=t.y;this.destination={x:t.x-this.width/2,y:t.y-3/4*this.height}}destroy(t){super.destroy(t),console.log(this.name,"destroyed")}}
var GameColors={red:16711680,orange:16744192,yellow:16776960,lime:8388352,green:65280,springGreen:65407,cyan:65535,azure:32767,blue:255,violet:8323327,black:0,grey:8421504,white:16777215,rose:16711807,magenta:16711935};
var keys={37:1,38:1,39:1,40:1};function preventDefault(e){e.preventDefault()}function preventDefaultForScrollKeys(e){if(keys[e.keyCode])return preventDefault(e),!1}var supportsPassive=!1;try{window.addEventListener("test",null,Object.defineProperty({},"passive",{get:function(){supportsPassive=!0}}))}catch(e){}var wheelOpt=!!supportsPassive&&{passive:!1},wheelEvent="onwheel"in document.createElement("div")?"wheel":"mousewheel";function disableScroll(){window.addEventListener("DOMMouseScroll",preventDefault,!1),window.addEventListener(wheelEvent,preventDefault,wheelOpt),window.addEventListener("touchmove",preventDefault,wheelOpt)}function enableScroll(){window.removeEventListener("DOMMouseScroll",preventDefault,!1),window.removeEventListener(wheelEvent,preventDefault,wheelOpt),window.removeEventListener("touchmove",preventDefault,wheelOpt),window.removeEventListener("keydown",preventDefaultForScrollKeys,!1)}
class Sector extends PIXI.Container{constructor(e){super(),this.info=e,this.id=e.id||e.name,this.name=e.name,this.x=e.x,this.y=e.y,this.players={},game.data.maps[game.info.map][this.id]&&(this.data=game.data.maps[game.info.map][this.id],this.loadData()),this.data&&this.data.background?this.background=PIXI.Sprite.from(PIXI.Texture.from(this.data.background)):(this.background=PIXI.Sprite.from(PIXI.Texture.WHITE),this.background.tint=65536*e.x+256*e.y+255),this.background.width=this.background.height=game.info.SECTOR_SIZE,this.addChild(this.background),this.updatePlayers()}async loadData(){}update(e){if(game.player){var t=game.world.worldToScreen(this.info);this.x=t.x,this.y=t.y,Object.values(this.players).forEach(t=>t.update(e))}}worldToSector(e={x:0,y:0}){return{x:e.x-this.info.x,y:e.y-this.info.y}}sectorToWorld(e={x:0,y:0}){return{x:e.x+this.info.x,y:e.y+this.info.y}}updatePlayers(){var e=this,t=game.info.players.filter(t=>e.name==t.sector.x+"-"+t.sector.y);for(var a in this.players)t.map(e=>e.id).includes(a)||this.removePlayer(a);for(var i of t){a=this.addPlayer(i);game.info.id==i.id&&(game.player=a,this.removeChild(a),this.addChild(a))}}addPlayer(e){if(e.textureBlob=blobFromBytes(e.textureBlob),this.players[e.id])return this.players[e.id].updateInfo(e),this.players[e.id];var t=new Player(e);return this.players[e.id]=t,this.addChild(t),t}removePlayer(e){this.removeChild(this.players[e]),this.players[e].destroy({children:!0}),delete this.players[e]}movePlayer(e){this.players[e.id].moveTo(e)}destroy(e){super.destroy(e),console.log(this.name,"destroyed")}}
function createBinder(n){return function(n,...t){return this[n].bind(this,...t)}.bind(n)}function blobFromBytes(n){if(n)return new Blob([n],{type:"image/png"})}function centerTo(n,t){t||(t={width:0,height:0}),n.x=t.width/2-n.width/2,n.y=t.height/2-n.height/2}function numberToColor(n){var t=n.toString(16);return"#000000".substr(0,7-t.length)+t}function lerpXY(n,t,e){return{x:n.x+e*(t.x-n.x),y:n.y+e*(t.y-n.y)}}function vec(...n){return 1==n.length?"object"==typeof n[0]?Object.values(n[0]):n[0]:n}function mag2(...n){return(n=vec(...n)).reduce((n,t)=>n+t*t,0)}function mag(...n){return Math.sqrt(mag2(...n))}function norm(...n){n=vec(...n);var t=mag(...n);return n.map(n=>n/t)}function subVec(n,t){return vec(n).map((n,e)=>n-vec(t)[e])}function addVec(n,t){return vec(n).map((n,e)=>n+vec(t)[e])}function multVec(n,t){return vec(n).map((n,e)=>n*vec(t)[e])}function divVec(n,t){return vec(n).map((n,e)=>n/vec(t)[e])}function moveTowards(n,t,e){var r=t.x-n.x,c=t.y-n.y;if(mag([r,c])>e){Math.atan2(c,r);var u=norm([r,c]);r=u[0]*e,c=u[1]*e}return{x:n.x+r,y:n.y+c}}
class World extends PIXI.Container{constructor(){super(),this.bind=createBinder(this),this.sectors={},this.players={},this.bindSocket("joinGame"),this.bindSocket("joinMap"),this.bindSocket("joinSector"),this.bindSocket("addPlayer"),this.bindSocket("removePlayer"),this.bindSocket("movePlayer")}bindSocket(e){game.on(e,(...a)=>{console.log(e,...a),this.bind(e)(...a)})}screenToWorld(e){var a=game.sector?game.sector.sectorToWorld(game.player):game.player;return{x:e.x-game.getScreen().width/2+a.x,y:e.y-game.getScreen().height/2+a.y}}worldToScreen(e){var a=game.sector?game.sector.sectorToWorld(game.player):game.player;return{x:e.x-a.x+game.getScreen().width/2,y:e.y-a.y+game.getScreen().height/2}}getSectorName({x:e,y:a}){return e+"-"+a}update(e){Object.values(this.sectors).forEach(a=>a.update(e))}mouseDown(e){var a={x:e.pageX-game.getScreen().width/2+game.player.x,y:e.pageY-game.getScreen().height/2+game.player.y};game.emit("movePlayer",a),game.player.moveTo(a)}async joinGame(e){game.info.id=e.id,game.info.server=e.server,game.info.SECTOR_SIZE=e.SECTOR_SIZE,await this.joinMap(e)}async joinMap(e){game.info.map=e.map,game.data.maps[e.map]=await game.loadFile("data/maps/"+e.map+".json"),await this.joinSector(e)}async joinSector(e){for(var a in game.info.sector=e.sector,game.info.players=e.players,game.info.sectors=e.sectors,this.sectors)e.sectors.map(e=>e.name).includes(a)||this.removeSector(a);for(var r of e.sectors){a=this.addSector(r);game.info.sector==r.name&&(game.sector=a,this.removeChild(a),this.addChild(a))}}addSector(e){if(this.sectors[e.name])return this.sectors[e.name].updatePlayers(e.players),this.sectors[e.name];var a=new Sector(e);return this.sectors[e.name]=a,this.addChild(a),a}removeSector(e){this.removeChild(this.sectors[e]),this.sectors[e].destroy({children:!0}),delete this.sectors[e]}addPlayer(e){game.info.players.map(e=>e.id).includes(e.id)||game.info.players.push(e),this.sectors[this.getSectorName(e.sector)].addPlayer(e)}removePlayer(e){game.info.players.map(e=>e.id).includes(e.id)&&(game.info.player=game.info.players.filter(a=>a!=e.id)),this.sectors[e.sector].removePlayer(e.id)}movePlayer(e){this.sectors[e.sector].movePlayer(e)}}
class TouchHandler{constructor(){this.bind=createBinder(this),window.addEventListener("touchstart",this.bind("touchStart")),window.addEventListener("touchmove",this.bind("touchMove")),window.addEventListener("touchcancel",this.bind("touchEnd")),window.addEventListener("touchend",this.bind("touchEnd")),this.lastTouches=[]}touchStart(o){Array(...o.touches).forEach(o=>{window.onmousedown&&window.onmousedown(o),window.dispatchEvent(new MouseEvent("mousedown",o))}),this.lastTouches=Array(...o.touches)}touchMove(o){Array(...o.touches).forEach(o=>{window.onmousedown&&window.onmousemove(o),window.dispatchEvent(new MouseEvent("mousemove",o))}),this.lastTouches=Array(...o.touches)}touchEnd(o){var t=Array(...o.touches);0==o.touches.length&&(t=this.lastTouches),t.forEach(o=>{window.onmousedown&&window.onmouseup(o),window.dispatchEvent(new MouseEvent("mouseup",o))}),this.lastTouches=Array(...o.touches)}}
//# sourceMappingURL=game.min.js.map
